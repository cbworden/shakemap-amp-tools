#!/usr/bin/env python

# stdlib imports
import sys
import os.path
import re
import argparse
import glob
import string

# third party imports
import openpyxl
from openpyxl.styles import Alignment
from openpyxl.styles.borders import Border, Side

# local imports
from amptools.table import dataframe_to_xml
from amptools.stream import streams_to_dataframe
from amptools.io.cwb.core import read_cwb, is_cwb
from amptools.io.geonet.core import read_geonet, is_geonet
from amptools.io.knet.core import read_knet, is_knet

FORMATS = ['cwb', 'geonet', 'knet']


def _clean_sheet(outfile_excel, dataframe):
    """Put reference at top of spreadsheet, remove index column.

    Args:
        outfile_excel (str): Path to Excel spreadsheet.
        dataframe (DataFrame): Pandas DataFrame containing the data in the Excel file.

    """
    # We want put a default reference at the top of the sheet because
    # 1) it helps users know where to put it
    # 2) it ensures consistency of sheet layout
    # The problem - you can't insert or delete rows/columns in openpyxl.
    # So we'll copy the data from the sheet, paste it into a new sheet, and
    # delete the old sheet.
    # Maintain the merged cells for the channels
    # Set the borders on the header cells (incl sub-headers and merged cells) TODO
    # center merged cells

    wb = openpyxl.load_workbook(outfile_excel)
    sheet1 = wb.active

    # copy the data values from the sheet
    rows = []
    topleft = 'B1'
    bottomright = 'V%i' % (len(dataframe) + 3)
    cellrange = '%s:%s' % (topleft, bottomright)
    channel_columns = []
    for row in sheet1[cellrange]:
        row_data = []
        for cell in row:
            cvalue = cell.value
            if cvalue in ['HHZ', 'HHE', 'HHN', 'H1', 'H2', 'HZ']:
                # 0-based column index in new sheet
                channel_columns.append(cell.col_idx - 2)
            row_data.append(cell.value)
        rows.append(row_data)

    # create a new sheet and paste data into it
    sheet2 = wb.create_sheet(title='PeakGroundMotions')
    # put reference in
    refcol = 'network'
    if 'source' in dataframe.columns:
        refcol = 'source'
    sheet2.append(['Reference', dataframe[refcol].iloc[0]])
    for row in rows:
        sheet2.append(row)

    # merge the channel header cells and center them
    for channel_column in channel_columns:
        letters = string.ascii_uppercase
        colidx = letters[channel_column]
        right_colidx = letters[channel_column + 4]
        left_cell_idx = '%s2' % (colidx)
        right_cell_idx = '%s2' % (right_colidx)
        sheet2.merge_cells('%s:%s' % (left_cell_idx, right_cell_idx))
        left_cell = sheet2[left_cell_idx]
        right_cell = sheet2[right_cell_idx]
        left_cell.alignment = Alignment(horizontal='center')
        left_border = Border(left=Side(style='thin'),
                             right=Side(style=None),
                             top=Side(style=None),
                             bottom=Side(style=None))
        left_cell.border = left_border
        right_border = Border(left=Side(style=None),
                              right=Side(style='thin'),
                              top=Side(style=None),
                              bottom=Side(style=None))
        right_cell.border = right_border

    wb.remove(sheet1)
    wb.save(outfile_excel)


def main(args):
    # gather arguments
    indir = args.indir
    eventid = args.eventid
    outdir = args.outdir
    format = args.format

    # get appropriate file reader/checker for format
    data_files = []
    if format == 'cwb':
        reader = read_cwb
        checker = is_cwb
    elif format == 'geonet':
        reader = read_geonet
        checker = is_geonet
    elif format == 'knet':
        reader = read_knet
        checker = is_knet
    else:
        raise Exception('Unsupported format %s' % format)

    # grab all the files in the input directory
    allfiles = glob.glob(os.path.join(indir, '*'))

    # check each file - if it isn't specified format, skip it
    for afile in allfiles:
        if checker(afile):
            data_files.append(afile)

    # Bail if we didn't find any appropriate files
    if not len(data_files):
        print('No data files matching %s format found in %s.  Exiting.' %
              (format, indir))
        sys.exit(1)

    # read all the data files, gather up a list of obspy Stream objects
    streams = []
    for dfile in data_files:
        if args.verbose:
            print('Parsing %s...' % dfile)
        stream = reader(dfile)
        if args.debug:
            station = stream[0].stats['station']
            stream_file = os.path.join(outdir, '%s_data.png' % station)
            stream.plot(outfile=stream_file)
        streams.append(stream)

    # Extract station/peak information from each stream, save to a dataframe
    dataframe, spectral_streams = streams_to_dataframe(streams)
    if args.double_debug:
        for stream in spectral_streams:
            station = stream[0].stats['station']
            stream_file = os.path.join(outdir, '%s_spectral.png' % station)
            stream.plot(outfile=stream_file)

    # Save peak info in spreadsheet form
    # we're forced here to have the index column, as much as we might not want it
    outfile_excel = os.path.join(outdir, '%s_dat.xlsx' % eventid)
    dataframe.to_excel(outfile_excel)

    # modify the spreadsheet to add a reference at the top and remove index column
    _clean_sheet(outfile_excel, dataframe)

    print('Wrote Excel file %s' % outfile_excel)

    # Write out the ShakeMap XML data format
    outfile = dataframe_to_xml(dataframe, eventid, outdir)
    print('Peak ground motions written to file %s.' % outfile)


if __name__ == '__main__':
    desc = '''Convert a directory of strong motion data files into ShakeMap xml.
    '''
    parser = argparse.ArgumentParser(description=desc,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('eventid', help='Earthquake event ID.')
    parser.add_argument('indir', help='Directory containing input data.')
    parser.add_argument('outdir', help='Output data directory.')
    parser.add_argument('format', help='Input strong motion data format.',
                        choices=FORMATS)
    parser.add_argument('-v', '--verbose', help='Print progress information.',
                        action='store_true', default=False)
    parser.add_argument('-d', '--debug', help='Plot acceleration waveforms.',
                        action='store_true', default=False)
    parser.add_argument('-dd', '--double-debug',
                        help='Plot *spectral* acceleration waveforms.',
                        action='store_true', default=False)
    pargs = parser.parse_args()
    main(pargs)
