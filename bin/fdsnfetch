#!/usr/bin/env python

import argparse
import os
import json
from amptools.io import fdsn
from amptools.process import correct_baseline_mean, remove_clipped
from obspy import read


def main(args):

    networks = [str(net) for net in args.n.split()]
    stations = [str(stn) for stn in args.s.split()]
    channels = [str(chn) for chn in args.c.split()]

    # Request waveforms using parameters, getting stream and inventory
    st, inv = fdsn.request_raw_waveforms(args.client, args.org_time,
                                         args.lat, args.lon, args.b, args.a,
                                         args.dmin, args.dmax, networks,
                                         stations, channels)

    os.chdir(args.out)
    if not os.path.exists('raw'):
        os.mkdir('raw')
    if not os.path.exists('metadata'):
        os.mkdir('metadata')

    # Write the raw files to the raw directory
    print('Writing raw files to {0}/Raw'.format(args.out))
    for tr in st:
        tr = fdsn.add_channel_metadata(tr, inv, args.client)
        trid = tr.get_id()
        tr.write('raw/{0}-{1}.'.format(trid, tr.stats.starttime) + args.f,
                 format=args.f)

    # Do some preliminary processing if desired by the user
    if args.r:
        if not os.path.exists('resp_cor'):
            os.mkdir('resp_cor')
        st_bas = correct_baseline_mean(st)
        st_unc = remove_clipped(st_bas)
        st_res = fdsn.remove_response(st_unc)

        for tr in st_res:
            trid = tr.get_id()
            tr.write('resp_cor/{0}-{1}.'.format(trid, tr.stats.starttime) + args.f,
                     format=args.f)

    # Save metadata to JSON files
    stations = inv.get_contents()['stations']
    stations = [stn.split(' ')[0].split('.')[1] for stn in stations]
    for stn in stations:
        meta_dict = {}
        st = read('raw/*' + stn + '*')
        for tr in st:
            # Clean up the stats dictionary and make it serializable
            stats = fdsn.clean_stats(tr.stats)
            meta_dict[tr.stats.channel] = fdsn.clean_stats(stats)

        # Save the dictionary to a JSON file
        with open('metadata/' + stn + '.json', 'w') as fp:
            json.dump(meta_dict, fp)


if __name__ == '__main__':

    desc = 'Fetch data from an FDSN client.'
    parser = argparse.ArgumentParser(description=desc)

    # Required arguments
    parser.add_argument('out', help='Output file directory', type=str)
    parser.add_argument('client', help='FSDN client name', type=str)
    parser.add_argument('org_time', help='Event origin time', type=str)
    parser.add_argument('lat', help='Event latitude', type=float)
    parser.add_argument('lon', help='Event longitude', type=float)

    # Optional arguments
    parser.add_argument('-b', '-before_time', help='Time (s) before event',
                        default=120, type=float)
    parser.add_argument('-a', '-after_time', help='Time (s) after event',
                        default=600, type=float)
    parser.add_argument('-dmin', help='Minimum distance from event (km)',
                        default=0, type=float)
    parser.add_argument('-dmax', help='Maximum distance from event (km)',
                        default=1.5, type=float)
    parser.add_argument('-n', '-networks', help='Networks to request',
                        default='*', type=str)
    parser.add_argument('-s', '-stations', help='Stations to request',
                        default='*', type=str)
    parser.add_argument('-c', '-channels', help='Channels to request',
                        default='*', type=str)
    parser.add_argument('-f', '-format,', help='Format type to save data',
                        default='MSEED', type=str)
    parser.add_argument('-r', action='store_true',
                        help='Whether to denconvolve instrument response')

    pargs = parser.parse_args()
    main(pargs)
